#!python3
"""
Clean up of API reference markdown files produced by Doxybook2. 
"""
import argparse
import logging
import os
import re
import sys

import doc_helpers

LOGGER = logging.getLogger("")

def process_doxybook_file(input_dir, output_dir, file_path):
    """
    Fix up markdown file generated by Doxybook.
    """
    filename = os.path.basename(file_path)
    new_filename = re.sub("^(class|struct)", "", filename)
    with open(file_path, mode='r', encoding='utf-8') as handle:
        contents = handle.read()
    # delete placeholder text that was inserted as a doxybook2 hack
    contents = contents.replace('[delete_this_placeholder_line]\n', '')
    # update the UID meta information
    contents = contents.replace('[insert_uid]', os.path.splitext(new_filename)[0])
    # find all links in the document, i.e. [...](...) blocks
    # TODO: regex is very basic and not aware of context (e.g. not detecting pre-formatted code blocks)
    link_re = re.compile(r"\[([^\]]*)\]\(([^\)]*)\)")
    index = 0
    new_contents = []
    for link_match in link_re.finditer(contents):
        new_contents.append(contents[index:link_match.start()])
        index = link_match.end()
        link_text, link_ref = link_match.groups()
        # fix internal links: [...](file.md#anchor) => [...](#anchor)
        if link_ref.startswith(f'{filename}#'):
            link_ref = link_ref[len(filename):]
        # remove "class_" prefix from all filenames in links or references
        for prefix in ('class', 'struct'):
            if link_ref.startswith(prefix):
                link_ref = link_ref[len(prefix):]
                break
        # TODO: links to overloaded ctors and to destructors are ambiguous - this needs fixing
        # remove ~ character from links to details of destructors
        # ~ in section headers is ignored, each header with title that evaluates to the same anchor id
        # receives an incremental prefix, e.g.:
        # function-uuxtboundscontrolcomponent, function-uuxtboundscontrolcomponent-1, function-uuxtboundscontrolcomponent-2, ...
        if '~' in link_ref:
            link_ref = link_ref.replace('~', '')
        new_contents.append(f'[{link_text}]({link_ref})')
    new_contents.append(contents[index:])
    doc_helpers.update_file(file_path=os.path.join(output_dir, new_filename),
                            contents="".join(new_contents))
    return True

if __name__ == "__main__":
    PARSER = argparse.ArgumentParser(description=__doc__)
    PARSER.add_argument("input", help="Path to folder with .md files")
    PARSER.add_argument("-o", "--output", help="Path to output directory (if not processing in place)", required=False)
    PARSER.add_argument("-v", "--verbose", help="Verbose output")
    ARGS = PARSER.parse_args(sys.argv[1:])
    logging.basicConfig(format="%(asctime)s - %(levelname)s: %(message)s", level=logging.DEBUG if ARGS.verbose else logging.INFO)
    result = doc_helpers.process_folder(input_dir=ARGS.input,
                                        output_dir=ARGS.output or ARGS.input,
                                        filter_ext=doc_helpers.MARKDOWN_EXT,
                                        callback=process_doxybook_file)
    sys.exit(0 if result else 1)
